[{"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\index.tsx":"1","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Pages\\Home\\Home.tsx":"2","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Map\\Map.tsx":"3","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\NavigationBar\\NavigationBar.tsx":"4","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Timeline\\Timeline.tsx":"5","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Map\\initialData.ts":"6","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Timeline\\TimelineStyles.ts":"7","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Scripts\\Scripts.tsx":"8"},{"size":1588,"mtime":1616204791024,"results":"9","hashOfConfig":"10"},{"size":787,"mtime":1616104467259,"results":"11","hashOfConfig":"10"},{"size":6129,"mtime":1616192692800,"results":"12","hashOfConfig":"10"},{"size":1715,"mtime":1616203041617,"results":"13","hashOfConfig":"10"},{"size":2985,"mtime":1616214795406,"results":"14","hashOfConfig":"10"},{"size":6860,"mtime":1613505889550,"results":"15","hashOfConfig":"10"},{"size":1738,"mtime":1616214433020,"results":"16","hashOfConfig":"10"},{"size":2865,"mtime":1616206977133,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rhklc7",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\index.tsx",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Pages\\Home\\Home.tsx",[],["36","37"],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Map\\Map.tsx",["38","39"],"import React from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport { GlobalProps } from '../../Types/GlobalProps';\r\nimport { Country, CountryCodeData } from '../../Types/MapState';\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\ninterface MapProps extends GlobalProps {\r\n    timelineValue: number\r\n}\r\nconst Map: React.FC<MapProps> = (props: MapProps) => {\r\n    const { globalState } = props;\r\n    const [chart, setChart] = React.useState<am4maps.MapChart | undefined>(undefined)\r\n    const [curTimelineVal, setCurTimelineVal] = React.useState(-1)\r\n\r\n    React.useEffect(() => {\r\n        if (chart === undefined) {\r\n            const data = globalState.get(\"CountryData\") as Country[]\r\n            let mapChart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n            mapChart.geodata = am4geodata_worldLow\r\n            mapChart.projection = new am4maps.projections.Miller();\r\n            mapChart.height = am4core.percent(100)\r\n\r\n            let polygonSeries = mapChart.series.push(new am4maps.MapPolygonSeries());\r\n            polygonSeries.exclude = [\r\n                \"AQ\", \"HM\", \"TF\", \"RE\", \"SC\", \"IO\", \"CX\", \"CC\", \"MV\", \"BV\", \"GS\", \"SH\", \"ST\",\r\n                \"JU\", \"KM\", \"YT\", \"GO\", \"GU\", \"PW\", \"MP\", \"FM\", \"NR\", \"MH\", \"TV\", \"NF\", \"CV\", \"FO\",\r\n                \"PM\", \"TC\", \"KY\", \"PF\", \"PN\", \"CK\", \"NU\", \"TO\", \"WF\", \"TK\"\r\n            ];\r\n            polygonSeries.useGeodata = true;\r\n            polygonSeries.data = data;\r\n            polygonSeries.mapPolygons.template.adapter.add(\"fill\", (fill, target) => {\r\n                const item = (target.dataItem.dataContext as Country)\r\n                if (item) {\r\n                    if (item.value) {\r\n                        if(item.value > 0.05) {\r\n                            return am4core.color(getColorForPercentage(item.value, true))\r\n                        } else if (item.value < -0.05) {\r\n                            return am4core.color(getColorForPercentage(item.value, false))\r\n                        } else if (item.value <= 0.05 && item.value >= -0.05) {\r\n                            return am4core.color(\"#FFFF22\")\r\n                        }\r\n                    } else {\r\n                        return am4core.color(\"#D9D9D9\")\r\n                    }\r\n                }\r\n                return fill\r\n            })\r\n\r\n            let polygonTemplate = polygonSeries.mapPolygons.template;\r\n            polygonTemplate.tooltipText = \"{name} : {value}\";\r\n            polygonTemplate.nonScalingStroke = true;\r\n\r\n            setChart(mapChart)\r\n        }\r\n    }, [chart, globalState, getColorForPercentage])\r\n\r\n    React.useEffect(() => {\r\n        if (curTimelineVal !== -1 && chart){\r\n            const polygons = chart.series.getIndex(0) as am4maps.MapPolygonSeries;\r\n            if (polygons) {\r\n                const timelineData = globalState.get(\"TimelineData\")[props.timelineValue] as CountryCodeData\r\n                for (const [key, value] of Object.entries(timelineData)) {\r\n                    const polygon = polygons.getPolygonById(key)\r\n                    if (polygon) {\r\n                        const val = value as number\r\n                        (polygon.dataItem.dataContext as Country).value = val\r\n                        polygon.dataItem.value = val\r\n                        let fill = polygon.fill\r\n                        if (val) {\r\n                            if(val > 0.05) {\r\n                                fill = am4core.color(getColorForPercentage(val, true))\r\n                            } else if (val < -0.05) {\r\n                                fill = am4core.color(getColorForPercentage(val, false))\r\n                            } else if (val <= 0.05 && val >= -0.05) {\r\n                                fill = am4core.color(\"#FFFF22\")\r\n                            }\r\n                        } else {\r\n                            fill = am4core.color(\"#D9D9D9\")\r\n                        }\r\n                        polygon.fill = fill\r\n                    }\r\n                }\r\n                polygons.invalidateRawData()\r\n            }\r\n        }\r\n        setCurTimelineVal(props.timelineValue)\r\n    }, [props.timelineValue])\r\n\r\n    return (\r\n        <div id=\"chartdiv\" style={{ width: \"99%\", height: \"80%\" }}></div>\r\n    );    \r\n\r\n    function componentToHex(c: number) {\r\n        const hex = c.toString(16);\r\n        return hex.length === 1 ? \"0\" + hex : hex;\r\n    }\r\n\r\n    function getColorForPercentage(pct: number, mode: boolean) {\r\n        const positive = [\r\n            { pct: 0.05, color: { r: 0xff, g: 0xff, b: 0x22 } },\r\n            { pct: 0.5, color: { r: 0x86, g: 0xff, b: 0x11 } },\r\n            { pct: 1.0, color: { r: 0x09, g: 0xff, b: 0x00 } } \r\n        ];\r\n\r\n        const negative = [\r\n            { pct: -1.0, color: { r: 0xff, g: 0x00, b: 0x0e } },\r\n            { pct: -0.5, color: { r: 0xff, g: 0x7a, b: 0x18 } },\r\n            { pct: -0.05, color: { r: 0xff, g: 0xff, b: 0x22 } } \r\n        ];\r\n        \r\n        var percentColors;\r\n        if (mode)\r\n            percentColors = positive\r\n        else\r\n            percentColors = negative\r\n        for (var i = 1; i < percentColors.length - 1; i++) {\r\n            if (pct < percentColors[i].pct) {\r\n                break;\r\n            }\r\n        }\r\n        const lower = percentColors[i - 1];\r\n        const upper = percentColors[i];\r\n        const range = upper.pct - lower.pct;\r\n        const rangePct = (pct - lower.pct) / range;\r\n        const pctLower = 1 - rangePct;\r\n        const pctUpper = rangePct;\r\n        const color = {\r\n            r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),\r\n            g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),\r\n            b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper)\r\n        };\r\n        \r\n        return \"#\" + componentToHex(color.r) + componentToHex(color.g) + componentToHex(color.b);\r\n    };\r\n}\r\n\r\n\r\nexport default Map;","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\NavigationBar\\NavigationBar.tsx",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Timeline\\Timeline.tsx",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Map\\initialData.ts",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Timeline\\TimelineStyles.ts",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Scripts\\Scripts.tsx",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":91,"column":8,"nodeType":"46","endLine":91,"endColumn":29,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"48","line":102,"column":5,"nodeType":"49","endLine":138,"endColumn":6},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'chart', 'curTimelineVal', 'getColorForPercentage', and 'globalState'. Either include them or remove the dependency array.","ArrayExpression",["52"],"The 'getColorForPercentage' function makes the dependencies of useEffect Hook (at line 59) change on every render. To fix this, wrap the definition of 'getColorForPercentage' in its own useCallback() Hook.","FunctionDeclaration","no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},"Update the dependencies array to be: [chart, curTimelineVal, getColorForPercentage, globalState, props.timelineValue]",{"range":"55","text":"56"},[4328,4349],"[chart, curTimelineVal, getColorForPercentage, globalState, props.timelineValue]"]