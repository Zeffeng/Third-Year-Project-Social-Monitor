[{"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\index.tsx":"1","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Pages\\Home\\Home.tsx":"2","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Map\\Map.tsx":"3","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\NavigationBar\\NavigationBar.tsx":"4","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Timeline\\Timeline.tsx":"5","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Map\\initialData.ts":"6","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Timeline\\TimelineStyles.ts":"7","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Scripts\\Scripts.tsx":"8","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\NERSidePanel\\NERSidePanel.tsx":"9","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\NERSidePanel\\NERSidePanelStyles.ts":"10","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\SearchBar\\SearchBar.tsx":"11"},{"size":1588,"mtime":1618264537406,"results":"12","hashOfConfig":"13"},{"size":1176,"mtime":1616618448458,"results":"14","hashOfConfig":"13"},{"size":8202,"mtime":1618266977593,"results":"15","hashOfConfig":"13"},{"size":3826,"mtime":1618320289237,"results":"16","hashOfConfig":"13"},{"size":2480,"mtime":1616612735483,"results":"17","hashOfConfig":"13"},{"size":7061,"mtime":1618525922617,"results":"18","hashOfConfig":"13"},{"size":1098,"mtime":1616682878256,"results":"19","hashOfConfig":"13"},{"size":7994,"mtime":1618267420073,"results":"20","hashOfConfig":"13"},{"size":2112,"mtime":1618263138370,"results":"21","hashOfConfig":"13"},{"size":797,"mtime":1618269106777,"results":"22","hashOfConfig":"13"},{"size":601,"mtime":1618266899023,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"rhklc7",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\index.tsx",[],["50","51"],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Pages\\Home\\Home.tsx",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Map\\Map.tsx",["52","53"],"import React from 'react';\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport { GlobalProps } from '../../Types/GlobalProps';\r\nimport { Country, CountryCodeData, CountrySentimentData } from '../../Types/MapState';\r\nimport { TimelineValuesState } from '../../Types/TimelineValuesState';\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\ninterface MapProps extends GlobalProps {\r\n    timelineValue: TimelineValuesState\r\n}\r\nconst Map: React.FC<MapProps> = (props: MapProps) => {\r\n    const { globalState } = props;\r\n    const [chart, setChart] = React.useState<am4maps.MapChart | undefined>(undefined)\r\n    const [curTimelineVal, setCurTimelineVal] = React.useState(-1)\r\n\r\n    React.useEffect(() => {\r\n        if (chart === undefined) {\r\n            const data = globalState.get(\"CountryData\") as Country[]\r\n            let mapChart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n            mapChart.geodata = am4geodata_worldLow\r\n            mapChart.projection = new am4maps.projections.Miller();\r\n            mapChart.height = am4core.percent(100)\r\n\r\n            let polygonSeries = mapChart.series.push(new am4maps.MapPolygonSeries());\r\n            polygonSeries.exclude = [\r\n                \"AQ\", \"HM\", \"TF\", \"RE\", \"SC\", \"IO\", \"CX\", \"CC\", \"BV\", \"GS\", \"SH\", \"ST\",\r\n                \"JU\", \"KM\", \"YT\", \"GO\", \"GU\", \"PW\", \"MP\", \"FM\", \"NR\", \"MH\", \"NF\", \"CV\", \"FO\",\r\n                \"PM\", \"TC\", \"KY\", \"PF\", \"PN\", \"CK\", \"NU\", \"TO\", \"WF\", \"TK\"\r\n            ];\r\n            polygonSeries.useGeodata = true;\r\n            polygonSeries.data = data;\r\n            polygonSeries.mapPolygons.template.adapter.add(\"fill\", (fill, target) => {\r\n                const item = (target.dataItem.dataContext as Country)\r\n                if (item) {\r\n                    if (item.value) {\r\n                        if(item.value > 0.05) {\r\n                            return am4core.color(getColorForPercentage(item.value, true))\r\n                        } else if (item.value < -0.05) {\r\n                            return am4core.color(getColorForPercentage(item.value, false))\r\n                        } else if (item.value <= 0.05 && item.value >= -0.05) {\r\n                            return am4core.color(\"#FFFF22\")\r\n                        }\r\n                    } else {\r\n                        return am4core.color(\"#D9D9D9\")\r\n                    }\r\n                }\r\n                return fill\r\n            })\r\n\r\n            let polygonTemplate = polygonSeries.mapPolygons.template;\r\n            if (\"{value\" == null) {\r\n            \r\n            polygonTemplate.tooltipText = `\r\n                {name}\\n\r\n                Postive: {sentimentDistribution.pos}%\r\n                Neutral: {sentimentDistribution.neu}%\r\n                Negative: {sentimentDistribution.neg}%\r\n            `;} else {\r\n                polygonTemplate.tooltipText = \"{name}\"\r\n            }\r\n            polygonTemplate.nonScalingStroke = true;\r\n\r\n            let heatLegend = mapChart.createChild(am4maps.HeatLegend)\r\n            heatLegend.series = polygonSeries;\r\n            heatLegend.width = am4core.percent(50);\r\n            heatLegend.markerContainer.height = 1;\r\n            heatLegend.minColor = am4core.color(\"#FF000E\");\r\n            heatLegend.maxColor = am4core.color(\"#09FF00\");\r\n            heatLegend.minValue = -1;\r\n            heatLegend.maxValue = 1;\r\n            heatLegend.y = 840;\r\n            heatLegend.x = am4core.percent(25);\r\n\r\n            polygonSeries.mapPolygons.template.events.on(\"over\", function(ev) {\r\n                if (!isNaN(ev.target.dataItem.value)) {\r\n                    heatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\r\n                }\r\n                else {\r\n                    heatLegend.valueAxis.hideTooltip();\r\n                }\r\n            });\r\n\r\n            polygonSeries.mapPolygons.template.events.on(\"out\", function(ev) {\r\n                heatLegend.valueAxis.hideTooltip();\r\n            });\r\n\r\n            setChart(mapChart)\r\n        }\r\n    }, [chart, globalState, getColorForPercentage])\r\n\r\n    React.useEffect(() => {\r\n        if (curTimelineVal !== -1 && chart){\r\n            const polygons = chart.series.getIndex(0) as am4maps.MapPolygonSeries;\r\n            if (polygons) {\r\n                const timelineData = globalState.get(\"TimelineData\")[props.timelineValue.timelineIndex] as CountryCodeData\r\n                if (timelineData) {\r\n                    for (const [key, value] of Object.entries(timelineData)) {\r\n                        const polygon = polygons.getPolygonById(key)\r\n                        if (polygon) {\r\n                            if (value !== null) {\r\n                                const val = (value as CountrySentimentData).sentiment; \r\n                                (polygon.dataItem.dataContext as Country).value = val \r\n                                polygon.dataItem.value = val \r\n                                // let fill = polygon.fill\r\n                                if(val > 0.05) {\r\n                                    polygon.fill = am4core.color(getColorForPercentage(val, true))\r\n                                } else if (val < -0.05) {\r\n                                    polygon.fill = am4core.color(getColorForPercentage(val, false))\r\n                                } else if (val <= 0.05 && val >= -0.05) {\r\n                                    polygon.fill = am4core.color(\"#FFFF22\")\r\n                                }\r\n                                polygon.tooltipText = `\r\n                                    {name}\\n\r\n                                    Postive: {sentimentDistribution.pos}%\r\n                                    Neutral: {sentimentDistribution.neu}%\r\n                                    Negative: {sentimentDistribution.neg}%\r\n                                `;\r\n                            } else {\r\n                                polygon.fill = am4core.color(\"#D9D9D9\")\r\n                                polygon.tooltipText = \"{name}\"\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                polygons.invalidateRawData()\r\n            }\r\n        }\r\n        setCurTimelineVal(props.timelineValue.timelineIndex)\r\n    }, [props.timelineValue])\r\n\r\n    return (\r\n        <div id=\"chartdiv\" style={{ width: \"82vw\", height: \"72%\" }}></div>\r\n    );    \r\n\r\n    function componentToHex(c: number) {\r\n        const hex = c.toString(16);\r\n        return hex.length === 1 ? \"0\" + hex : hex;\r\n    }\r\n\r\n    function getColorForPercentage(pct: number, mode: boolean) {\r\n        const positive = [\r\n            { pct: 0.05, color: { r: 0xff, g: 0xff, b: 0x22 } },\r\n            { pct: 0.5, color: { r: 0x86, g: 0xff, b: 0x11 } },\r\n            { pct: 1.0, color: { r: 0x09, g: 0xff, b: 0x00 } } \r\n        ];\r\n\r\n        const negative = [\r\n            { pct: -1.0, color: { r: 0xff, g: 0x00, b: 0x0e } },\r\n            { pct: -0.5, color: { r: 0xff, g: 0x7a, b: 0x18 } },\r\n            { pct: -0.05, color: { r: 0xff, g: 0xff, b: 0x22 } } \r\n        ];\r\n        \r\n        var percentColors;\r\n        if (mode)\r\n            percentColors = positive\r\n        else\r\n            percentColors = negative\r\n        for (var i = 1; i < percentColors.length - 1; i++) {\r\n            if (pct < percentColors[i].pct) {\r\n                break;\r\n            }\r\n        }\r\n        const lower = percentColors[i - 1];\r\n        const upper = percentColors[i];\r\n        const range = upper.pct - lower.pct;\r\n        const rangePct = (pct - lower.pct) / range;\r\n        const pctLower = 1 - rangePct;\r\n        const pctUpper = rangePct;\r\n        const color = {\r\n            r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),\r\n            g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),\r\n            b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper)\r\n        };\r\n        \r\n        return \"#\" + componentToHex(color.r) + componentToHex(color.g) + componentToHex(color.b);\r\n    };\r\n}\r\n\r\n\r\nexport default Map;","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\NavigationBar\\NavigationBar.tsx",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Timeline\\Timeline.tsx",["54"],"import React from \"react\";\r\nimport { GlobalProps } from \"../../Types/GlobalProps\";\r\nimport { CountryCodeData } from \"../../Types/MapState\";\r\nimport { TimelineValuesState } from \"../../Types/TimelineValuesState\";\r\nimport { Slider, SliderContainer } from \"./TimelineStyles\";\r\n\r\ninterface TimelineProps extends GlobalProps {\r\n    setTimelineValues: React.Dispatch<React.SetStateAction<TimelineValuesState>>,\r\n    timelineValues: TimelineValuesState\r\n}\r\nconst Timeline: React.FC<TimelineProps> = (props: TimelineProps) => {\r\n    const { globalState, setTimelineValues, timelineValues } = props;\r\n    const [range, setRange] = React.useState({min: 0, max: 0});\r\n\r\n    const dateOptions: Intl.DateTimeFormatOptions = {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\"\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (range.max === 0) {\r\n            const timelineData = globalState.get(\"TimelineData\") as CountryCodeData[]\r\n            if (timelineData.length > 0) {\r\n                setRange({\r\n                    max: Date.parse(timelineData.slice(-1)[0][\"date\"] as string),\r\n                    min: Date.parse(timelineData[0][\"date\"] as string)\r\n                })\r\n                setTimelineValues({\r\n                    timelineIndex: 0,\r\n                    currentDateUnix: Date.parse(timelineData.slice(-1)[0][\"date\"] as string),\r\n                    currentDateString: \"\"\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    function handleSliderChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        const dateUNIX = parseInt(e.target.value)\r\n        const date = new Date(dateUNIX).toLocaleDateString(\"fr-CA\", dateOptions)\r\n        const timelineData = globalState.get(\"TimelineData\") as CountryCodeData[]\r\n        if (timelineData.length > 0) {\r\n            setTimelineValues({\r\n                timelineIndex: timelineData.map(item => item[\"date\"]).indexOf(date),\r\n                currentDateString: date,\r\n                currentDateUnix: dateUNIX\r\n            })\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <SliderContainer>\r\n            <Slider onChange={event => handleSliderChange(event)} value={timelineValues.currentDateUnix} \r\n                min={range.min} max={range.max} step={86400} \r\n                tooltipLabel={(value) => {\r\n                    return new Date(value).toLocaleDateString(\"fr-CA\", dateOptions)\r\n                }}\r\n            />\r\n        </SliderContainer>\r\n    )\r\n}\r\n\r\nexport default Timeline;","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Map\\initialData.ts",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Timeline\\TimelineStyles.ts",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\Scripts\\Scripts.tsx",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\NERSidePanel\\NERSidePanel.tsx",["55"],"import React from \"react\";\r\nimport { GlobalProps } from \"../../Types/GlobalProps\";\r\nimport { NERSentTimeline } from \"../../Types/MapState\";\r\nimport { TimelineValuesState } from \"../../Types/TimelineValuesState\";\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport { NERContainer, NERList, Text, Tooltip} from \"./NERSidePanelStyles\";\r\n\r\ninterface NERSidePanelProps extends GlobalProps {\r\n    timelineValues: TimelineValuesState\r\n}\r\nconst NERSidePanel: React.FC<NERSidePanelProps> = (props: NERSidePanelProps) => {\r\n    const { globalState, timelineValues } = props;\r\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n\r\n    return (\r\n        <NERContainer>\r\n            <SearchBar setSearchTerm={setSearchTerm} searchTerm={searchTerm}/>\r\n            <NERList>\r\n                {Object.keys(globalState.get(\"TimelineNER\")).length && timelineValues.currentDateString !== \"\" \r\n                    ? (globalState.get(\"TimelineNER\") as NERSentTimeline)[timelineValues.currentDateString]\r\n                        .filter(item => {\r\n                            const [key, value] = Object.entries(item)[0]\r\n                            if (searchTerm !== \"\") {\r\n                                return key.toLocaleLowerCase().includes(searchTerm.toLocaleLowerCase())\r\n                            } else {\r\n                                return true\r\n                            }\r\n                        }).map(item => {\r\n                            const [key, value] = Object.entries(item)[0]\r\n                            const entity = key\r\n                            const totalCount = value.neg + value.neu + value.pos\r\n                            return (\r\n                                <Tooltip>{entity + \": \" + totalCount}\r\n                                    <Text key={entity}>Postive: {value.pos + \"\\n\"} Neutral: {value.neu + \"\\n\"} Negative: {value.neg + \"\\n\"}</Text>\r\n                                </Tooltip>\r\n                            )\r\n                        }) \r\n                    : null}\r\n            </NERList>\r\n        </NERContainer>\r\n    )\r\n}\r\n\r\nexport default NERSidePanel;","C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\NERSidePanel\\NERSidePanelStyles.ts",[],"C:\\Users\\Ze Feng Huang\\Documents\\Third-Year-Project-Social-Monitor\\social-monitor\\src\\Components\\SearchBar\\SearchBar.tsx",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":133,"column":8,"nodeType":"62","endLine":133,"endColumn":29,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"64","line":144,"column":5,"nodeType":"65","endLine":180,"endColumn":6},{"ruleId":"60","severity":1,"message":"66","line":21,"column":5,"nodeType":"67","endLine":21,"endColumn":20,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":22,"column":41,"nodeType":"71","messageId":"72","endLine":22,"endColumn":46},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'chart', 'curTimelineVal', 'getColorForPercentage', and 'globalState'. Either include them or remove the dependency array.","ArrayExpression",["75"],"The 'getColorForPercentage' function makes the dependencies of useEffect Hook (at line 93) change on every render. To fix this, wrap the definition of 'getColorForPercentage' in its own useCallback() Hook.","FunctionDeclaration","React Hook useEffect contains a call to 'setRange'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [range.max, globalState, setTimelineValues] as a second argument to the useEffect Hook.","MemberExpression",["76"],"@typescript-eslint/no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [chart, curTimelineVal, getColorForPercentage, globalState, props.timelineValue]",{"range":"81","text":"82"},"Add dependencies array: [range.max, globalState, setTimelineValues]",{"range":"83","text":"84"},[6400,6421],"[chart, curTimelineVal, getColorForPercentage, globalState, props.timelineValue]",[1460,1460],", [range.max, globalState, setTimelineValues]"]